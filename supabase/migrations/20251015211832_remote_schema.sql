


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."order_status" AS ENUM (
    'Pendente',
    'Pago',
    'Enviado',
    'Entregue',
    'Cancelado'
);


ALTER TYPE "public"."order_status" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."calculate_total_sales"() RETURNS numeric
    LANGUAGE "plpgsql"
    AS $$DECLARE
  total NUMERIC;
BEGIN
  SELECT SUM(o.total)
  INTO total
  FROM orders o;

  IF total IS NULL THEN
    total := 0;
  END IF;

  RETURN total;
END;$$;


ALTER FUNCTION "public"."calculate_total_sales"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_order_details"("p_order_id" "uuid") RETURNS TABLE("order_id" "uuid", "customer_name" "text", "customer_email" "text", "product_name" "text", "quantity" integer, "unit_price" numeric, "status" "text", "created_at" timestamp without time zone)
    LANGUAGE "plpgsql"
    AS $$BEGIN
  RETURN QUERY
  SELECT
    o.id AS order_id,
    o.customer_id,
    o.status,
    o.created_at,
    p.name AS product_name,
    oi.quantity,
    oi.unit_price
  FROM orders o
  JOIN order_items oi ON o.id = oi.order_id
  JOIN products p ON oi.product_id = p.id
  WHERE o.id = p_order_id;
END;$$;


ALTER FUNCTION "public"."get_order_details"("p_order_id" "uuid") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_order_status"("p_order_id" "uuid", "p_status" "text") RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$BEGIN
  UPDATE orders
  SET status = p_status
  WHERE id = p_order_id;
END;$$;


ALTER FUNCTION "public"."update_order_status"("p_order_id" "uuid", "p_status" "text") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."customers" (
    "id" "uuid" NOT NULL,
    "first_name" "text",
    "last_name" "text",
    "address" "text"
);


ALTER TABLE "public"."customers" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."orders" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "customer_id" "uuid" NOT NULL,
    "total" numeric(8,2) NOT NULL,
    "status" "public"."order_status" DEFAULT 'Pendente'::"public"."order_status" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."orders" OWNER TO "postgres";


CREATE OR REPLACE VIEW "public"."customer_total" AS
 SELECT "c"."id" AS "customer_id",
    (("c"."first_name" || ' '::"text") || "c"."last_name") AS "customer_name",
    "c"."address" AS "customer_address",
    "sum"("o"."total") AS "total_spent",
    "count"("o"."id") AS "total_orders",
    "max"("o"."created_at") AS "last_order_date"
   FROM ("public"."customers" "c"
     LEFT JOIN "public"."orders" "o" ON (("o"."customer_id" = "c"."id")))
  GROUP BY "c"."id", "c"."first_name", "c"."last_name", "c"."address"
  ORDER BY ("sum"("o"."total")) DESC;


ALTER VIEW "public"."customer_total" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."order_items" (
    "id" bigint NOT NULL,
    "order_id" "uuid" NOT NULL,
    "product_id" "uuid" NOT NULL,
    "quantity" integer NOT NULL,
    "unit_price" numeric(8,2) NOT NULL
);


ALTER TABLE "public"."order_items" OWNER TO "postgres";


ALTER TABLE "public"."order_items" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."order_items_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."products" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text" DEFAULT 'Sem descrição'::"text" NOT NULL,
    "price" numeric(8,2) NOT NULL,
    "stock" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."products" OWNER TO "postgres";


CREATE OR REPLACE VIEW "public"."top_products" AS
 SELECT "p"."id" AS "product_id",
    "p"."name" AS "product_name",
    COALESCE("sum"("oi"."quantity"), (0)::bigint) AS "total_quantity_sold",
    COALESCE("sum"((("oi"."quantity")::numeric * "oi"."unit_price")), (0)::numeric) AS "total_revenue"
   FROM (("public"."products" "p"
     LEFT JOIN "public"."order_items" "oi" ON (("oi"."product_id" = "p"."id")))
     LEFT JOIN "public"."orders" "o" ON (("o"."id" = "oi"."order_id")))
  WHERE (("o"."status" IS NULL) OR ("o"."status" <> 'Cancelado'::"public"."order_status"))
  GROUP BY "p"."id", "p"."name"
  ORDER BY COALESCE("sum"("oi"."quantity"), (0)::bigint) DESC;


ALTER VIEW "public"."top_products" OWNER TO "postgres";


CREATE OR REPLACE VIEW "public"."view_order_details" AS
 SELECT "o"."id" AS "order_id",
    "o"."created_at" AS "order_date",
    "o"."status" AS "order_status",
    "o"."total" AS "order_total",
    "c"."id" AS "customer_id",
    (("c"."first_name" || ' '::"text") || "c"."last_name") AS "customer_name",
    "c"."address" AS "customer_address",
    "p"."id" AS "product_id",
    "p"."name" AS "product_name",
    "p"."description" AS "product_description",
    "p"."price" AS "product_price",
    "oi"."quantity" AS "product_quantity",
    "oi"."unit_price" AS "product_unit_price",
    (("oi"."quantity")::numeric * "oi"."unit_price") AS "total_item"
   FROM ((("public"."orders" "o"
     JOIN "public"."customers" "c" ON (("c"."id" = "o"."customer_id")))
     JOIN "public"."order_items" "oi" ON (("oi"."order_id" = "o"."id")))
     JOIN "public"."products" "p" ON (("p"."id" = "oi"."product_id")));


ALTER VIEW "public"."view_order_details" OWNER TO "postgres";


ALTER TABLE ONLY "public"."customers"
    ADD CONSTRAINT "customers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."order_items"
    ADD CONSTRAINT "order_items_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."orders"
    ADD CONSTRAINT "orders_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."products"
    ADD CONSTRAINT "products_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."customers"
    ADD CONSTRAINT "customers_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."order_items"
    ADD CONSTRAINT "order_items_order_id_fkey" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("id");



ALTER TABLE ONLY "public"."order_items"
    ADD CONSTRAINT "order_items_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id");



ALTER TABLE ONLY "public"."orders"
    ADD CONSTRAINT "orders_customer_id_fkey" FOREIGN KEY ("customer_id") REFERENCES "public"."customers"("id");



CREATE POLICY "Clientes só podem atualizar o próprio perfil." ON "public"."customers" FOR UPDATE USING (("auth"."uid"() = "id"));



CREATE POLICY "Clientes só podem criar pedidos para eles mesmos." ON "public"."orders" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "customer_id"));



CREATE POLICY "Clientes só podem ver o seu próprio perfil." ON "public"."customers" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "id"));



CREATE POLICY "Clientes só podem ver os itens dos seus próprios pedidos." ON "public"."order_items" FOR SELECT USING ((( SELECT "orders"."customer_id"
   FROM "public"."orders"
  WHERE ("orders"."id" = "order_items"."order_id")) = "auth"."uid"()));



CREATE POLICY "Clientes só podem ver seus próprios pedidos." ON "public"."orders" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "customer_id"));



ALTER TABLE "public"."customers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."order_items" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."orders" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

























































































































































GRANT ALL ON FUNCTION "public"."calculate_total_sales"() TO "anon";
GRANT ALL ON FUNCTION "public"."calculate_total_sales"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."calculate_total_sales"() TO "service_role";



GRANT ALL ON FUNCTION "public"."get_order_details"("p_order_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."get_order_details"("p_order_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_order_details"("p_order_id" "uuid") TO "service_role";



GRANT ALL ON FUNCTION "public"."update_order_status"("p_order_id" "uuid", "p_status" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."update_order_status"("p_order_id" "uuid", "p_status" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_order_status"("p_order_id" "uuid", "p_status" "text") TO "service_role";


















GRANT ALL ON TABLE "public"."customers" TO "anon";
GRANT ALL ON TABLE "public"."customers" TO "authenticated";
GRANT ALL ON TABLE "public"."customers" TO "service_role";



GRANT ALL ON TABLE "public"."orders" TO "anon";
GRANT ALL ON TABLE "public"."orders" TO "authenticated";
GRANT ALL ON TABLE "public"."orders" TO "service_role";



GRANT ALL ON TABLE "public"."customer_total" TO "anon";
GRANT ALL ON TABLE "public"."customer_total" TO "authenticated";
GRANT ALL ON TABLE "public"."customer_total" TO "service_role";



GRANT ALL ON TABLE "public"."order_items" TO "anon";
GRANT ALL ON TABLE "public"."order_items" TO "authenticated";
GRANT ALL ON TABLE "public"."order_items" TO "service_role";



GRANT ALL ON SEQUENCE "public"."order_items_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."order_items_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."order_items_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."products" TO "anon";
GRANT ALL ON TABLE "public"."products" TO "authenticated";
GRANT ALL ON TABLE "public"."products" TO "service_role";



GRANT ALL ON TABLE "public"."top_products" TO "anon";
GRANT ALL ON TABLE "public"."top_products" TO "authenticated";
GRANT ALL ON TABLE "public"."top_products" TO "service_role";



GRANT ALL ON TABLE "public"."view_order_details" TO "anon";
GRANT ALL ON TABLE "public"."view_order_details" TO "authenticated";
GRANT ALL ON TABLE "public"."view_order_details" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";































RESET ALL;

